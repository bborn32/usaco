//LAST MODIFIED         :      April 19, 2016
//PROBLEM ID            :      Stamps
//DESCRIPTION           :      Given a set of N stamp values (e.g., {1 cent, 3 cents}) and 
//                             an upper limit K to the number of stamps that can
//                             fit on an envelope, calculate the largest unbroken list 
//                             of postages from 1 cent to M cents that can be created.                          
//Sources and Helpers   :      Mr. Houtrouw, Java API, McOrwin

import java.io.*;
import java.util.*;


public class stamps
{ 
    static int numStamps, numVals;
    static int[] stamps = new int[51];    
    public static void main (String[] args) throws IOException
    {
        // Opening files from USACO for input/output
        BufferedReader in = new BufferedReader (new FileReader("stamps.in"));       
        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("stamps.out")));        
        
        // Declare and initialize variables
        String[] in1 = in.readLine().split(" ");
        numStamps = Integer.parseInt(in1[0]);
        numVals = Integer.parseInt(in1[1]);
        int[] stamps = new int[51];       
        
        // Red in and sort stamps 
        for (int j = 0; j < numVals; j+= 15)
        {
            String[] in2 = in.readLine().split(" ");
            for (int k = 0; k < in2.length; k++)
            {
                stamps[j + k] = Integer.parseInt(in2[k]);                
            }
        }
        Arrays.sort(stamps);    
        
        // Declare and initalize more variables
        int maxCount = stamps[stamps.length - 1] * numStamps;
        int[] postage = new int[maxCount + 1];
        Arrays.fill(postage, maxCount + 1);
        int j;
        postage[0] = 0;
        
        // Increment up until maximum value
        for (j = 1; j <= maxCount; j++)
        {
            // Check each stamp to see if it will work
            for (int k = 0; k < stamps.length; k++)
            {
                // Check if stamp is within possible range for this value
                if (j - stamps[k] >= 0)
                {
                    // Check is using this stamp is minimal
                    postage[j] = Math.min(postage[j - stamps[k]] + 1, postage[j]);
                }                
            }
            
            // Check is postage value is now valid
            if (postage[j] > numStamps)
            {                
                break;                
            }
        }
        out.println(j - 1);        
        
        //Exits the program
        out.close();
        System.exit(0);
    }
}
