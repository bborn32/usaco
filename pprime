/*
ID: brandon29
PROG: pprime
LANG: JAVA
*/

import java.io.*;
import java.util.*;

public class pprime
{ 
    public static boolean isPrime(int j)
    {
        // Check if parameter is even
        if (j % 2== 0)
        {
            return false;
        }
        
        // Check possible odd factors
        for(int i = 3; i * i <= j; i+= 2) 
        {
            if(j % i == 0)
            {
                return false;
            }
        }
        
        // Else number is prime
        return true;
    }
    
    public static void main (String[] args) throws IOException
    {
        // Opening files from USACO for input/output
        BufferedReader in = new BufferedReader (new FileReader("pprime.in"));       
        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("pprime.out")));
        
        // Declare and initialize variables
        String stringInput = in.readLine();
        String splitInput[] = stringInput.split(" ");
        int startRange = Integer.parseInt(splitInput[0]);
        int endRange = Integer.parseInt(splitInput[1]);
        int palindrome;
        
        // Check 1-digit palindromes
        for (int d1 = 1; d1 <= 9; d1+=2)
        {
            palindrome = d1;
            if (isPrime(palindrome) && (palindrome <= endRange) && (palindrome >= startRange))
            {
                out.println(palindrome);
            }
        }
        
        // Check 2-digit palindromes
        for (int d1 = 1; d1 <= 9; d1+=2)
        {
            palindrome = 10 * d1 + d1;
            if (isPrime(palindrome) && (palindrome <= endRange) && (palindrome >= startRange))
            {
                out.println(palindrome);
            }
        }
        
        // Check 3-digit palindromes
        for (int d1 = 1; d1 <= 9; d1+=2)
        {
            for (int d2 = 0; d2 <= 9; d2++)
            {
                palindrome = 100 * d1 + 10 * d2 + d1;
                if (isPrime(palindrome) && (palindrome <= endRange) && (palindrome >= startRange))
                {
                    out.println(palindrome);
                }
            }
        }
        
        // Check 4-digit palindromes
        for (int d1 = 1; d1 <= 9; d1+=2)
        {
            for (int d2 = 0; d2 <= 9; d2++)
            {
                palindrome = 1000 * d1 + 100 * d2 + 10 * d2 + d1;
                if (isPrime(palindrome) && (palindrome <= endRange) && (palindrome >= startRange))
                {
                    out.println(palindrome);
                }
            }
        }
        
        // Check 5-digit palindromes
        for (int d1 = 1; d1 <= 9; d1+=2)
        {
            for (int d2 = 0; d2 <= 9; d2++)
            {
                for (int d3 = 0; d3 <= 9; d3++)
                {
                    palindrome = 10000 * d1 + 1000 * d2 + 100 * d3 + 10 * d2 + d1;
                    if (isPrime(palindrome) && (palindrome <= endRange) && (palindrome >= startRange))
                    {
                        out.println(palindrome);
                    }
                }
            }
        }
        
        // Check 6-digit palindromes
        for (int d1 = 1; d1 <= 9; d1+=2)
        {
            for (int d2 = 0; d2 <= 9; d2++)
            {
                for (int d3 = 0; d3 <= 9; d3++)
                {
                    palindrome = 100000 * d1 + 10000 * d2 + 1000 * d3 + 100 * d3 + 10 * d2 + d1;
                    if (isPrime(palindrome) && (palindrome <= endRange) && (palindrome >= startRange))
                    {
                        out.println(palindrome);
                    }
                    
                }
            }
        }
        
        // Check 7-digit palindromes
        for (int d1 = 1; d1 <= 9; d1+=2)
        {
            for (int d2 = 0; d2 <= 9; d2++)
            {
                for (int d3 = 0; d3 <= 9; d3++)
                {
                    for (int d4 = 0; d4 <= 9; d4++)
                    {
                        palindrome = 1000000 * d1 + 100000 * d2 + 10000 * d3 + 1000 * d4 + 100 * d3 + 10 * d2 + d1;
                        if (isPrime(palindrome) && (palindrome <= endRange) && (palindrome >= startRange))
                        {
                            out.println(palindrome);
                        }
                    }
                }
            }
        }
        
        // Check 8-digit palindromes
        for (int d1 = 1; d1 <= 9; d1+=2)
        {
            for (int d2 = 0; d2 <= 9; d2++)
            {
                for (int d3 = 0; d3 <= 9; d3++)
                {
                    for (int d4 = 0; d4 <= 9; d4++)
                    {
                        palindrome = 10000000 * d1 + 1000000 * d2 + 100000 * d3 + 10000 * d4 + 1000 * d4 + 100 * d3 + 10 * d2 + d1;
                        if (isPrime(palindrome) && (palindrome <= endRange) && (palindrome >= startRange))
                        {
                            out.println(palindrome);
                        }
                    }
                }
            }
        }
               
        //Exits the program
        out.close();
        System.exit(0);
    }
}
